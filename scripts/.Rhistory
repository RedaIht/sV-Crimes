c
plot(p)
?write_tableHTML
write_tableHTML(tableHTML(tableC), tableHTML(tableD), file = 'myfile.html')
c <- paste("<h3>tableC</h3>", tableHTML(tableC))
d <- paste("<h3>tableD</h3>", tableHTML(tableD))
e <- paste("<h3>tableE</h3>", tableHTML(tableE))
f <- paste("<h3>tableF</h3>", tableHTML(tableF))
g <- paste("<h3>tableG</h3>", tableHTML(tableG))
?paste
writeLines(paste(c,d,e,f,g), file("Aufg2.html"))
fileConn <- file("Aufg2.html")
writeLines(paste(c,d,e,f,g), fileConn)
close(fileConn)
newdata
head(soil.data)
head(soil)
soil.data <- read.csv("soilrespiration1.csv", sep=";")
soil.data <- read.csv("soilrespiration1.csv", sep=";")
soil.data <- read.csv("soilrespiration1.csv", sep=";")
library(readr)
soilrespiration1 <- read_csv("~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung1/soilrespiration1.csv")
View(soilrespiration1)
pnorm(mu-3*sigma, mean=mu, sd=sigma) - pnorm(mu-3*sigma, mean=mu, sd=sigma)
mu <- 5
sigma <- sqrt(2)
pnorm(mu-sigma, mean=mu, sd=sigma) - pnorm(mu-sigma, mean=mu, sd=sigma)
pnorm(mu+2*sigma, mean=mu, sd=sigma) - pnorm(mu-2*sigma, mean=mu, sd=sigma)
pnorm(mu-3*sigma, mean=mu, sd=sigma) - pnorm(mu-3*sigma, mean=mu, sd=sigma)
p1 <- pnorm(mu-sigma, mean=mu, sd=sigma) - pnorm(mu-sigma, mean=mu, sd=sigma)
p2 <- pnorm(mu+2*sigma, mean=mu, sd=sigma) - pnorm(mu-2*sigma, mean=mu, sd=sigma)
p3 <- pnorm(mu-3*sigma, mean=mu, sd=sigma) - pnorm(mu-3*sigma, mean=mu, sd=sigma)
p1
pnorm(mu-3*sigma, mean=mu, sd=sigma) - pnorm(mu-3*sigma, mean=mu, sd=sigma)# uebung2 (7.11.17)
mu <- 15
sigma <- sqrt(2)
p1 <- pnorm(mu-sigma, mean=mu, sd=sigma) - pnorm(mu-sigma, mean=mu, sd=sigma)
p2 <- pnorm(mu+2*sigma, mean=mu, sd=sigma) - pnorm(mu-2*sigma, mean=mu, sd=sigma)
p3 <- pnorm(mu-3*sigma, mean=mu, sd=sigma) - pnorm(mu-3*sigma, mean=mu, sd=sigma)
p1
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/uebung2.R', echo=TRUE)
p3
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/uebung2.R', echo=TRUE)
y3
y3 <- 3
simanz <- 1000
v3 <- v10 <- rep(0,simanz)
set.seed(13)
for(i in 1:simanz) {
y3[i] <- mean(runif(3))
y10[i] <- mean(runif(10))
}
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/uebung2.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/uebung2.R', echo=TRUE)
soil.data <- read.csv("soilrespiration.csv", sep=";")
x <- soil.data$temp
y <- log(soil.data$resp)
plot(x,y)
### Zielfunktion zum Minimieren
krit2 <- function(x,y,b0,b1) {
sum((y-(b0+b1*x))^2)
}
x
plot(x)
plot(y)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/uebung2.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
likelihood.vec <- Vectorize(likelihood, "theta")
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
y <- rexp(20, 1)
y
theta.vec <- seq(0,1.2,0.01)
theta.vec
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung2/likelihood.R', echo=TRUE)
y <- rexp(20, 1)
y
theta.vec <- seq(0,1.2,0.01)
plot(theta.vec, likelihood(theta.vec, y), type="l")
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
View(likelihood)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
library(readr)
mietspiegel99 <- read_csv("~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/mietspiegel99.csv")
View(mietspiegel99)
mietspiegel99->miete.data
View(mietspiegel99)
rm(mietspiegel99)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
beta.hat
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
x <- cbind(1, miete.data$flaeche)
x
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
beta.hat <- solve(t(x) %*% x) %*% t(x) %*% miete.data$miete
beta.hat
plot(miete.data$bjahr, miete.data$mieteqm)
plot(miete.data$bjahr, miete.data$mieteqm, style="l")
?plot
plot(miete.data$bjahr, miete.data$mieteqm, type="l")
?solve
flaeche <- miete.data$flaeche
theta.hat <- n / (sum(flaeche))
theta.hat
theta.hat
flaeche
theta.hat <- n / (sum(flaeche))
flaeche <- miete.data$flaeche
n <- length(flaeche)
theta.hat <- length / (sum(flaeche))
theta.hat
n <- length(flaeche)
n
theta.hat <- n / (sum(flaeche))
theta.hat
head(flaeche)
flaeche
theta.hat <- (sum(flaeche)) / n
theta.hat
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
## 1)
#miete.data <- read.csv("mietspiegel99.csv", sep=";")
## a)
x <- 1/miete.data$flaeche
y <- miete.data$mieteqm
simpleModel <- lm(y~x)
plot(x,y)
pred <- predict(simpleModel)
points(x, pred)
points(x, pred, col = "red")
points(x, pred, col = 3)
points(x, pred, col = "red")
beta0.hat <- simpleModel$coefficients[[1]]
beta1.hat <- simpleModel$coefficients[[2]]
beta0.hat
plot(miete.data$bjahr, miete.data$mieteqm)
simpleModel[['coefficients']]
beta0.hat
beta1.hat
location.model
location.model <- lm(y~x+as.factor(lage), data = miete.data)
location.pred  <- predict(location.model)
location.model
flaeche:miete.data$bjahr
miete.data$bjahr
year.model <- lm(y~x:z+as.factor(lage), data = miete.data)
z <- miete.data$bjahr^2
year.model <- lm(y~x:z+as.factor(lage), data = miete.data)
year.model
points(z, year.pred)
year.model <- lm(y~x:z+as.factor(lage), data = miete.data)year.pred  <- predict(year.model)
year.pred  <- predict(year.model)
points(z, year.pred)
points(z, year.pred, col="red")
rooms.model <- lm(y~x:z+as.factor(lage)+as.factor(bed)+as.factor(bad)+as.factor(zh), data = miete.data)
rooms.model <- lm(y~x:z+as.factor(lage)+as.factor(bad)+as.factor(zh), data = miete.data)
rooms.model
?residuals
?OpenNewPlotWindow
?hist
residuals_ <- function(model, label) {
r <- residuals(model)
plot.new()
frame()
par(mfrow=c(2,1))
hist(r, freq = FALSE, xlab="residuals")
s <- seq(round(min(r)), round(max(r)), length.out = 100)
plot(s, pnorm(s, 0, sd = sqrt(var(r))), type = "l", col = "red")
par(mfrow=c(1,1))
}
residuals_(simpleModel, "simple model")
simple.model <- lm(y~x)
residuals_(location.model, "location model")
residuals_(years.model, "simple model")
residuals_(year.model, "simple model")
residuals_ <- function(model, label) {
r <- residuals(model)
plot.new()
frame()
par(mfrow=c(2,1))
hist(r, freq = FALSE, xlab="residuals", title = label)
s <- seq(round(min(r)), round(max(r)), length.out = 100)
plot(s, pnorm(s, 0, sd = sqrt(var(r))), type = "l", col = "red")
par(mfrow=c(1,1))
}
residuals_(simple.model, "simple model")
residuals_(location.model, "location model")
residuals_(year.model, "simple model")
residuals_(rooms.model, "rooms model")
residuals_(simple.model, "simple model")
residuals_ <- function(model, label) {
r <- residuals(model)
plot.new()
frame()
par(mfrow=c(2,1))
hist(r, freq = FALSE, xlab="residuals")
title(main = title)
s <- seq(round(min(r)), round(max(r)), length.out = 100)
plot(s, pnorm(s, 0, sd = sqrt(var(r))), type = "l", col = "red")
par(mfrow=c(1,1))
}
residuals_(simple.model, "simple model")
residuals_(location.model, "location model")
residuals_(year.model, "simple model")
residuals_(rooms.model, "rooms model")
plot(cars, main = "") # here, could use main directly
title(main = "Stopping Distance versus Speed")
residuals_ <- function(model, label) {
r <- residuals(model)
plot.new()
frame()
par(mfrow=c(2,1))
hist(r, freq = FALSE, xlab="residuals")
#title(main = title)
s <- seq(round(min(r)), round(max(r)), length.out = 100)
plot(s, pnorm(s, 0, sd = sqrt(var(r))), type = "l", col = "red")
title(main = title)
par(mfrow=c(1,1))
}
residuals_(simple.model, "simple model")
residuals_(location.model, "location model")
residuals_(year.model, "simple model")
residuals_(rooms.model, "rooms model")
mlEstimator <- function(X, bHat) {
n <- length(x)
sigma.hat.q <- (1/n)*(t(miete.data$mieteqm - X %*% bHat)%*%miete.data$mieteqm - X%*%bHat)
d <- dim(X)[2]
sigma.tilde.q <- 1/(n - (k+1))*sigma.hat.q
return(c(sigma.hat.q[1], sigma.tilde.q[1]))
}
X <- cbind(1, x)
simple <- mlEstimator(X, c(simple.model$coefficients))
MLSig = function(X, b_hat)
{
n = length(miete_data$flaeche)
sig_hat_q = 1/n * t(miete_data$mieteqm - X%*%b_hat) %*% (miete_data$mieteqm - X%*%b_hat)
k = dim(X)[2]
sig_tilde_q = 1 / (n - (k+1)) * sig_hat_q
return(c(sig_hat_q[1], sig_tilde_q[1]))
}
mlEstimator = function(X, bHat) {
sigma.hat.q <- 1/length(miete.data$flaeche) * t(miete.data$mieteqm - X%*%b_hat) %*% (miete.data$mieteqm - X%*%b_hat)
sigma.tilde.q = 1 / (n - (dim(X)[2]+1)) * sigma.hat.q
return(c(sigma.hat.q[1], sigma.tilde.q[1]))
}
X <- cbind(1, x)
simple <- mlEstimator(X, c(simple.model$coefficients))
mlEstimator = function(X, bHat) {
sigma.hat.q <- 1/length(miete.data$flaeche) * t(miete.data$mieteqm - X%*%bHat) %*% (miete.data$mieteqm - X%*%b_hat)
sigma.tilde.q = 1 / (n - (dim(X)[2]+1)) * sigma.hat.q
return(c(sigma.hat.q[1], sigma.tilde.q[1]))
}
X <- cbind(1, x)
simple <- mlEstimator(X, c(simple.model$coefficients))
mlEstimator = function(X, bHat) {
sigma.hat.q <- 1/length(miete.data$flaeche) * t(miete.data$mieteqm - X%*%bHat) %*% (miete.data$mieteqm - X%*%bHat)
sigma.tilde.q = 1 / (n - (dim(X)[2]+1)) * sigma.hat.q
return(c(sigma.hat.q[1], sigma.tilde.q[1]))
}
X <- cbind(1, x)
simple <- mlEstimator(X, c(simple.model$coefficients))
simple
location.m <- cbind(1, x, miete.data$lage==2, miete.data$lage==3)
location.f <- mlEstimator(location.m, c(model.lage$coefficients))
location.m <- cbind(1, x, miete.data$lage==2, miete.data$lage==3)
location.f <- mlEstimator(location.m, c(location.model$coefficients))
rooms.m <- cbind(1, miete.data$lage==2, miete.data$lage==3, miete.data$bad, miete.data$zh, x*z)
rooms.f <- mlEstimator(rooms.m, c(rooms.model$coefficients))
rooms.m
rooms.f
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
simple.model <- predict(simple.model, newdata = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
simple.g <- predict(simple.model, newdata = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0)
data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0) -> a
predict(simple.model, newdata = a)
head(simple.data)
head(simple.model)
location.g <- predict(location.model, newdata = data.frame(flaeche2=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
predict(simple.model)
predict(simple.model, newdata = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
miete.data
predict(simple.model, newdata = data.frame(100, 1950, 3, 1, 1, 0))
predict(data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
predict(data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))simple.g <- predict(as.numeric(simple.model),
newdata = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
simple.g <- predict(as.numeric(simple.model),
newdata = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
predict(as.numeric(simple.model),
newdata = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
typeof(simple.model)
as.numeric(simple.model)
simple.g <- predict(simple.model,
newdata = data.frame(x=as.double(1/100),
bjahr=as.double(1950),
lage=as.double(3),
zh=as.double(1), bad=as.double(1), kueche=as.double(0)))
simple.g <- predict(simple.model,
data = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0)->a
typeof(a)
a
a$x
a$x->a
typeof(a)
typeof(simple.model)
year.g <- predict(year.model,
data = data.frame(x=1/100, z=1950^2, lage=3, zh=1, bad=1, kueche=0))
year.g
simple.g <- predict(simple.model,
data = data.frame(x=1/100, bjahr=1950^2, lage=3, zh=1, bad=1, kueche=0))
location.g <- predict(location.model,
data = data.frame(x=1/100, bjahr=1950^2, lage=3, zh=1, bad=1, kueche=0))
year.g <- predict(year.model,
data = data.frame(x=1/100, z=1950^2, lage=3, zh=1, bad=1, kueche=0))
rooms.g <- predict(rooms.model,
data = data.frame(x=1/100, z=1950^2, lage=3, zh=1, bad=1, kueche=0))
simple.g <- predict(simple.model,
data = data.frame(x=1/100, bjahr=as.double(1950), lage=3, zh=1, bad=1, kueche=0))
1950^2
typeof(1950^2)
typeof(1950)
simple.g <- predict(simple.model,
data = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
ocation.g <- predict(location.model,
data = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
location.g <- predict(location.model,
data = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
year.g <- predict(year.model,
data = data.frame(x=1/100, z=1950^2, lage=3, zh=1, bad=1, kueche=0))
rooms.g <- predict(rooms.model,
data = data.frame(x=1/100, z=1950^2, lage=3, zh=1, bad=1, kueche=0))
simple.model <- lm(y~x)
simple.g <- predict(simple.model,
data = data.frame(x=1/100, bjahr=1950, lage=3, zh=1, bad=1, kueche=0))
bloodPressure.data <- read.csv('bloopdpressure.csv', sep = ';')
read.csv('bloodpressure.csv', sep = ';')
plot(1:10)
bloodPressure.data <- read.csv('bloodpressure.csv', sep = ';')
bloodPressure.data -> bP.data
bP.data
bP.model <- lm(bp~age, data = bP.data)
bP.model
bP.pred <- predict(bP.model)
points(bP.data$age, bP.pred, col=3)
X <- cbind(1, c(out[1]))
X
X <- cbind(1, c(out[1]))
out = split(bP.data, cut(bP.data$age, c(20,25,30,35,40,45,50,55,60), include.lowest = TRUE));
out
X <- cbind(1, c(out[1]))
bP.model[['coefficients']]
mlEstimator2 <- function(X, Y, bHat) {
sigma.hat.q   <- 1/dim(X)[1] * t(Y - X%*%bHat) %*% (Y - X%*%bHat)
sigma.tilde.q <- 1 / (dim(X)[1] - (dim(X)[2]+1)) * sigma.hat.q
return(c(sigma.hat.q[1], sigma.tilde.q[1]))
}
names(out)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
bP.model <- lm(bp~age, data = bP.data)
bP.pred <- predict(bP.model)
bP.pred
out <- split(bP.data, cut(bP.data$age, c(20,25,30,35,40,45,50,55,60), include.lowest = T));
X <- cbind(1, c(out[1]))
bP.model[['coefficients']]
mlEstimator2 <- function(X, Y, bHat) {
sigma.hat.q   <- 1/dim(X)[1] * t(Y - X%*%bHat) %*% (Y - X%*%bHat)
sigma.tilde.q <- 1 / (dim(X)[1] - (dim(X)[2]+1)) * sigma.hat.q
return(c(sigma.hat.q[1], sigma.tilde.q[1]))
}
vars.tilde <- rep(0, length(out))
i <- 0
for (n in names(out)) {
i <- i +1
R <- MLSig(cbind(1, out[[n]]$age), out[[n]]$bp, bP.model$coefficients)
vars.tilde[i] = R[2]
return(vars.tilde)
}
bP.model <- lm(bp~age, data = bP.data)
bP.pred <- predict(bP.model)
bP.pred
out <- split(bP.data, cut(bP.data$age, c(20,25,30,35,40,45,50,55,60), include.lowest = T));
X <- cbind(1, c(out[1]))
bP.model[['coefficients']]
mlEstimator2 <- function(X, Y, bHat) {
sigma.hat.q   <- 1/dim(X)[1] * t(Y - X%*%bHat) %*% (Y - X%*%bHat)
sigma.tilde.q <- 1 / (dim(X)[1] - (dim(X)[2]+1)) * sigma.hat.q
return(c(sigma.hat.q[1], sigma.tilde.q[1]))
}
vars.tilde <- rep(0, length(out))
i <- 0
for (n in names(out)) {
i <- i +1
R <- mlEstimator2(cbind(1, out[[n]]$age), out[[n]]$bp, bP.model$coefficients)
vars.tilde[i] = R[2]
return(vars.tilde)
}
for (n in names(out)) {
i <- i +1
R <- mlEstimator2(cbind(1, out[[n]]$age), out[[n]]$bp, bP.model$coefficients)
vars.tilde[i] = R[2]
return(vars.tilde)
}
bP.model <- lm(bp~age, data = bP.data)
bP.pred <- predict(bP.model)
bP.pred
out <- split(bP.data, cut(bP.data$age, c(20,25,30,35,40,45,50,55,60), include.lowest = T));
X <- cbind(1, c(out[1]))
bP.model[['coefficients']]
mlEstimator2 <- function(X, Y, bHat) {
sigma.hat.q   <- 1/dim(X)[1] * t(Y - X%*%bHat) %*% (Y - X%*%bHat)
sigma.tilde.q <- 1 / (dim(X)[1] - (dim(X)[2]+1)) * sigma.hat.q
return(c(sigma.hat.q[1], sigma.tilde.q[1]))
}
vars.tilde <- rep(0, length(out))
i <- 0
for (n in names(out)) {
i <- i +1
R <- mlEstimator2(cbind(1, out[[n]]$age), out[[n]]$bp, bP.model$coefficients)
vars.tilde[i] = R[2]
}
vars.tilde
bP.model <- lm(bp~age, data = bP.data)
bP.pred <- predict(bP.model)
bP.pred
out <- split(bP.data, cut(bP.data$age, c(20,25,30,35,40,45,50,55,60), include.lowest = T));
X <- cbind(1, c(out[1]))
bP.model[['coefficients']]
mlEstimator2 <- function(X, Y, bHat) {
sigma.hat.q   <- 1/dim(X)[1] * t(Y - X%*%bHat) %*% (Y - X%*%bHat)
sigma.tilde.q <- 1 / (dim(X)[1] - (dim(X)[2]+1)) * sigma.hat.q
return(c(sigma.hat.q[1], sigma.tilde.q[1]))
}
vars.tilde <- rep(0, length(out))
i <- 0
for (n in names(out)) {
i <- i +1
R <- mlEstimator2(cbind(1, out[[n]]$age), out[[n]]$bp, bP.model$coefficients)
vars.tilde[i] = R[2]
}
vars.tilde
x <- 1/miete.data$flaeche
y <- miete.data$mieteqm
z <- miete.data$bjahr^2
simple.model <- lm(y~x)
simple.pred <- predict(simple.model)
simple.model <- lm(y~x)
# anwendung von predict
simple.pred <- predict(simple.model)
## a)
simple.beta0.hat <- simple.model$coefficients[[1]]
simple.beta1.hat <- simple.model$coefficients[[2]]
simple.beta0.hat
simple.beta1.hat
head(simple.m)
head(years.m)
source('~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/Übungen/vS/Übung 4/uebung4.R', echo=TRUE)
bP.model <- lm(bp~age, data = bP.data)
bP.pred <- predict(bP.model)
bP.pred
# anlegen der altersintervalle
out <- split(bP.data, cut(bP.data$age, c(20,25,30,35,40,45,50,55,60), include.lowest = T));
X <- cbind(1, c(out[1]))
bP.model[['coefficients']]
# anpassung der funktion von oben
mlEstimator2 <- function(X, Y, bHat) {
sigma.hat.q   <- 1/dim(X)[1] * t(Y - X%*%bHat) %*% (Y - X%*%bHat)
sigma.tilde.q <- 1 / (dim(X)[1] - (dim(X)[2]+1)) * sigma.hat.q
return(c(sigma.hat.q[1], sigma.tilde.q[1]))
}
vars.tilde <- rep(0, length(out))
i <- 0
for (n in names(out)) {
i <- i +1
R <- mlEstimator2(cbind(1, out[[n]]$age), out[[n]]$bp, bP.model$coefficients)
vars.tilde[i] = R[2]
}
vars.tilde
cor(crimes.data$crimes, crimes.data$density)
crimes.data <- read.csv("crimes.csv")
setwd("~/Dokumente/Master/3. Fachsemester/statistische Verfahren/WS 17⁄18/projekt/crimes/scripts")
crimes.data <- read.csv("crimes.csv")
cor(crimes.data$crimes, crimes.data$density)
plot(crimes.data$crimes, crimes.data$prbarr)
cor(crimes.data$crimes, crimes.data$prbpris)
plot(crimes.data$crimes, crimes.data$prbpris)
cor(crimes.data$crimes, crimes.data$density)
plot(crimes.data$crimes, crimes.data$prbarr)
cor(crimes.data$crimes, crimes.data$polpc)
plot(crimes.data$crimes, crimes.data$polpc)
cor(crimes.data$crimes, crimes.data$prbarr)
plot(crimes.data$crimes, crimes.data$prbarr)
cov(crimes.data$crimes, crimes.data$polpc)
?cov
