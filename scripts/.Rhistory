rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 90)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 90, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 4)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 4, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
for (j in seq(1000:20, 100)) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
for (j in 1000:20) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
for (j in seq(1000:20, 100)) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
for (j in seq(1000:20, by=100)) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
for (j in seq(1000, 20, by=100)) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
for (j in seq(20, 1000, by=100)) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
a <- seq(1000, 50, by=50)
a <- seq(1000:50, by=50)
a <- seq(1000, 50, by=-50)
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
a <- seq(1000, 50, by=-50)
for(i in 1:loops) {
for (j in a) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare2 <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
a <- seq(1000, 50, by=-50)
for(i in 1:loops) {
for (j in a) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
a[1,i] <- mean(rm[,3]) / mean(rm[,1])
a[2,i] <- mean(rm[,4]) / mean(rm[,2])
}
return(a)
}
compare2()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
compare2 <- function(loops = 10) {
compare2 <- function(loops = 10) {
compare2 <- function(loops = 10) {
compare2 <- function(loops = 10) {
compare2 <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
a <- seq(1000, 50, by=-50)
for(i in 1:loops) {
for (j in a) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
a[1,i] <- mean(rm[,3]) / mean(rm[,1])
a[2,i] <- mean(rm[,4]) / mean(rm[,2])
}
return(a)
}
compare()
compare2()
compare2 <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
a <- seq(1000, 50, by=-50)
for(i in 1:loops) {
for (j in a) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
a[1,i] <- mean(rm[,3]) / mean(rm[,1])
a[2,i] <- mean(rm[,4]) / mean(rm[,2])
}
return(a)
}
compare2()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
}
}
}
}
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
compare2 <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
a <- seq(1000, 50, by=-50)
for(i in 1:loops) {
for (j in a) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
a[1,i] <- mean(rm[,3]) / mean(rm[,1])
a[2,i] <- mean(rm[,4]) / mean(rm[,2])
}
return(a)
}
compare2()
compare2 <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
a <- seq(1000, 50, by=-50)
for(i in 1:loops) {
for (j in a) {
betas1 <- simulation(model = m1, seed = sample(1:10000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:10000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
a[1,i] <- mean(rm[,3]) / mean(rm[,1])
a[2,i] <- mean(rm[,4]) / mean(rm[,2])
}
return(a)
}
compare2()
compare2 <- function(loops = 10) {
a <- seq(1000, 50, by=-50)
for(i in 1:loops) {
for (j in a) {
rm <- matrix(ncol = 4, nrow = loops)
betas1 <- simulation(model = m1, seed = sample(1:10000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:10000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
a[1,i] <- mean(rm[,3]) / mean(rm[,1])
a[2,i] <- mean(rm[,4]) / mean(rm[,2])
}
return(a)
}
compare2()
compare2 <- function(loops = 10) {
a <- seq(1000, 800, by=-50)
for(i in 1:loops) {
for (j in a) {
rm <- matrix(ncol = 4, nrow = loops)
betas1 <- simulation(model = m1, seed = sample(1:10000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:10000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
a[1,i] <- mean(rm[,3]) / mean(rm[,1])
a[2,i] <- mean(rm[,4]) / mean(rm[,2])
}
return(a)
}
compare2()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
a <- seq(1000, 800, by = -50)
for (i in a) {
a[1,i] <- compare()[1]
a[2,i] <- compare()[2]
}
