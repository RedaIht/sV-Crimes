rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 4, repeats = 30)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 10, repeats = 30)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 10, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 4, repeats = 30)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 30, repeats = 30)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 10, repeats = 30)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 10, repeats = 30)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 4, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 4, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 4, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 4, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 10, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 50) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 20, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 30, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 30, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 3)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 30, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 30, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
# tatsÃ¤chlicher kovarianzmatrix - asymptotischer kovarianzmatrix
# jeweils fÃ¼r beta0 und fÃ¼r beta1 aus
# compare vergleicht diese simulationen loops mal (default = 10)
# und gibt das verhÃ¤ltnis von beta0 aus erster und zweiter simulation
# sowie das verhÃ¤ltnis von beta1 aus erster und zweiter simulation aus
# ist eine der zahlen also grÃ¶Ãer als 1, so hat die erste simulation
# die grÃ¶Ãeren abstandswerte.
# also ist die erste simulation besser,
# ist eine der zahlen kleiner als 1, so ist die zweite simulation besser
# credentials of simulation 1, credentials of simulation 2
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m2, seed = sample(1:100000, 1), amount = 30, repeats = 30)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
